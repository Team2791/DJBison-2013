// RobotBuilder Version: 0.0.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc2791.MyRobot;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;
import edu.wpi.first.wpilibj.camera.AxisCamera;
import edu.wpi.first.wpilibj.camera.AxisCameraException;
import edu.wpi.first.wpilibj.Watchdog;
import edu.wpi.first.wpilibj.Timer;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Encoder driveTrainLeftQuadratureEncoderLeft;
    public static Victor driveTrainLeftLeftMotor2;
    public static Victor driveTrainLeftLeftMotor;
    public static Victor driveTrainRightRightMotor1;
    public static Victor driveTrainRightRightMotor2;
    public static Victor shooterWheelClose;
    public static Victor shooterWheelFar;
    public static Encoder driveTrainRightQuadratureEncoderRight;
    public static Compressor compressor;
    public static Solenoid solenoid1;    
    public static Solenoid solenoid2;
    //public static Servo servo;
    public static Victor VexMotor;
    public static Encoder armEncoder;
    public static Victor armMotor;
    //public static AxisCameraMotor;
    //public static Axis cam;
    public static DigitalInput limitSwitch;
    public static DigitalInput limitSwitch2;
    public static Timer timz;
   //public static AxisCamera cam;
    public static Timer timz2;
    public static Timer timz3;
    public static Timer timz4;
    public static Timer timz5;
    public static Timer timer1;
    public static Timer timzlikeaboss;
    public static AnalogChannel sensor1emitter;
    public static AnalogChannel sensor1detector;
    public static AnalogChannel sensor2emitter;
    public static AnalogChannel sensor2detector;
    public static AnalogChannel distanceSensor;
    public static DigitalInput toggle1;
    public static DigitalInput toggle2;
    
    //public static Watchdog wd;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    //public static Relay spike;
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeftQuadratureEncoderLeft = new Encoder(1, 2, 1, 1, false, EncodingType.k4X); //2nd and 4th
	LiveWindow.addSensor("DriveTrainLeft", "Quadrature Encoder Left", driveTrainLeftQuadratureEncoderLeft);
        driveTrainLeftQuadratureEncoderLeft.setDistancePerPulse(1.0);
        driveTrainLeftQuadratureEncoderLeft.setPIDSourceParameter(PIDSourceParameter.kRate);
        driveTrainLeftQuadratureEncoderLeft.start();
        driveTrainLeftLeftMotor2 = new Victor (1, 10);
        driveTrainLeftLeftMotor = new Victor(1, 2); //1,3  
		
        LiveWindow.addActuator("DriveTrainLeft", "LeftMotor", driveTrainLeftLeftMotor);
        //LiveWindow.addActuator("DriveTrainLeft", "LeftMotor2", driveTrainLeftLeftMotor2);
        
        driveTrainRightRightMotor1 = new Victor(1, 3);
        driveTrainRightRightMotor2 = new Victor(1, 1);
	LiveWindow.addActuator("DriveTrainRight", "RightMotor", driveTrainRightRightMotor1);
        //LiveWindow.addActuator("DriveTrainRight", "RightMotor2", driveTrainRightRightMotor2);

        driveTrainRightQuadratureEncoderRight = new Encoder(1, 4, 1, 3, false, EncodingType.k4X); //2nd and 4th
	LiveWindow.addSensor("DriveTrainRight", "Quadrature Encoder Right", driveTrainRightQuadratureEncoderRight);
        driveTrainRightQuadratureEncoderRight.setDistancePerPulse(1.0);
        driveTrainRightQuadratureEncoderRight.setPIDSourceParameter(PIDSourceParameter.kRate);
        driveTrainRightQuadratureEncoderRight.start();
        //vivtor 5 exists, but not used
        
        shooterWheelClose = new Victor(1, 7); // 7 is placeholder PWM slot
        shooterWheelFar = new Victor(1, 8); // 8 is placeholder
                // written in by Justin ... not autogenerated        
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        compressor = new Compressor(6, 1); //3,1
        // asukdfhyausefsolenoid = new Solenoid(8);
        solenoid1 = new Solenoid(1);
        solenoid2 = new Solenoid(2);
        //spike = new Relay(1)
        //servo = new Servo(5);//5-probs wrong
        armEncoder = new Encoder (1, 7, 1, 8, false, EncodingType.k4X); //1,3,1,4
        //armEncoder.setDistancePerPulse(1.0);
       //doesnt work
        armEncoder.start();
        
        armMotor = new Victor(1, 6); //shoulder, 6
        //cam = AxisCamera.getInstance();
        //cam.writeResolution(AxisCamera.ResolutionT.k160x120);
        //cam.writeBrightness(50);
        
        limitSwitch = new DigitalInput(5);
        limitSwitch2 = new DigitalInput(10);
        VexMotor = new Victor (1,4);
        timz = new Timer();
        timz2 = new Timer();
        timz3 = new Timer();
        timz4 = new Timer();
        timz5 = new Timer();
        timer1 = new Timer();
        timzlikeaboss = new Timer();
        sensor1emitter = new AnalogChannel(1);
        sensor1detector = new AnalogChannel(2);
        sensor2emitter = new AnalogChannel(3);
        sensor2detector = new AnalogChannel(4);
        distanceSensor = new AnalogChannel(5);
        //toggle1 = new DigitalInput(9);
        //toggle2 = new DigitalInput(10);
        //wd = Watchdog.getInstance();
        // PORT 9 IS A LIE.
        // CAKE IS A LIE
        // THEREFORE
        // PORT 9 = CAKE
        
        // if("port9"=="cake"){
        //    port9="lie";
        //    cake="lie";
        // }
        
        // turns out it isn't actually a lie
    }
}