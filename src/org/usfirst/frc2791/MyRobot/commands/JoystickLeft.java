// RobotBuilder Version: 0.0.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc2791.MyRobot.commands;
import edu.wpi.first.wpilibj.DriverStationLCD;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2791.MyRobot.OI;
import org.usfirst.frc2791.MyRobot.Robot;
import org.usfirst.frc2791.MyRobot.RobotMap;
import edu.wpi.first.wpilibj.Timer;

/**
 *
 */
public class JoystickLeft extends Command {
    public JoystickLeft() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrainLeft);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        //RobotMap.spike.set(Relay.Value.kOn);
        //RobotMap.spike.set(Relay.Value.kForward);
        //RobotMap.compressor.enabled();
        RobotMap.solenoid2.set(false);
        //RobotMap.compressor.start();
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        //RobotMap.wd.feed();
        //RobotMap.spike.set(Relay.Value.kOn);
        //RobotMap.spike.set(Relay.Value.kForward);
        //RobotMap.compressor.enabled();
        //RobotMap.compressor.start();
        //RobotMap.armEncoder.reset();
       // RobotMap.armEncoder.start();
        RobotMap.driveTrainLeftLeftMotor2.set(0.3*OI.joystick1.getY());
        RobotMap.driveTrainLeftLeftMotor.set(0.3*OI.joystick1.getY());
        //Robot.ds.println(DriverStationLCD.Line.kUser1,1,"encoderLeft: "+RobotMap.driveTrainLeftQuadratureEncoderLeft.get()+"                             ");
        //Robot.ds.println(DriverStationLCD.Line.kUser1,1,"Toggle1: "+RobotMap.toggle1.get()+"                                             ");
        Robot.ds.println(DriverStationLCD.Line.kUser2,1,"SensorD1: "+RobotMap.sensor1detector.getValue());
        Robot.ds.updateLCD();
        
        if (RobotMap.limitSwitch.get() == false)  {
            RobotMap.armEncoder.reset();
           // RobotMap.armEncoder.start(); //maybe this will work, idk, fuck it
        } //WRITTEN BY CHRIS PINECONE, BEST CODER EVER
        
                       
        Robot.ds.println(DriverStationLCD.Line.kUser4,1,"LimitSwitch: "+RobotMap.limitSwitch.get()+"                                             ");
        //Robot.ds.println(DriverStationLCD.Line.kUser3,1,"ZValue: "+OI.joystick3.getZ());
        Robot.ds.println(DriverStationLCD.Line.kUser5,1,"ArmEncoder: "+RobotMap.armEncoder.get()+"                                           ");

        Robot.ds.updateLCD();
        double shooterConstant = 1.0; //1.0
        /*if(OI.joystick3.getRawButton(3))
        {
            shooterConstant = 0.5;
        }
        else
        {
            shooterConstant = 1.0;
        }*/
        //boolean value = RobotMap.solenoid.get();
       // boolean use=true;
        //if (value == true){
        //  use = false;
       // }
        
        /*
        if(aditya.equals("idiot")){
          Robot.explode.start();
          for(int WTF=5; WTF>0; WTF--){
              System.out.println("asplosionz in "+WTF+"...");
          }
        }
         */
        /*double c = 0.0;
        if (OI.joystick1.getRawButton(3))
        {
            RobotMap.shooterWheelClose.set(-1);
            RobotMap.shooterWheelFar.set(-1);
        }*/
        /*if (OI.joystick1.getRawButton(5))
        {
            RobotMap.shooterWheelClose.set(c);
            RobotMap.shooterWheelFar.set(c);
        }*/
        /*if(OI.joystick3.getTrigger()==true)
        {
            RobotMap.solenoid2.set(false);
        }
        if(OI.joystick3.getTrigger()==false)
        {
            RobotMap.solenoid2.set(true);
        }*/
        //if(OI.joystick1.getRawButton(2))
        //{
           // RobotMap.compressor.start();        
            //RobotMap.compressor.enabled();

            //Robot.ds.println(DriverStationLCD.Line.kUser4,1,"This works ");
            //RobotMap.compressor.start();
        //}
        /*double s = 0.0;
        if(OI.joystick1.getRawButton(3))
        {
            s=RobotMap.servo.getAngle();
            s=s+324.0;
            RobotMap.servo.setAngle(s);
        }*/
        /*if(OI.joystick1.getRawButton(1)&&RobotMap.solenoid.get()==false)
        {
            RobotMap.solenoid.set(true);
            OI.ContinueLoop.set(true);
        }*/
        /*while(ContinueLoop==true) // ADDED BY JUSTIN DON'T HURT ME, SIKE
        {
            RobotMap.solenoid.set(true);
            if(OI.joystick1.getRawButton(1))
            {
                RobotMap.solenoid.set(false);
                ContinueLoop=false;
            }
        }*/
        
        
        //else if(OI.joystick1.getRawButton(1)&&RobotMap.solenoid.get()==true)
        //{
        //    RobotMap.solenoid.set(false);
        //}
        
        // ARM CODE IS BEING PLACED HERE TEMPORARILY
        // FUCK JOYSTICKTHREE
      // Robot.ds.println(DriverStationLCD.Line.kUser4,1,"Joystick3 GetY: "+OI.joystick3.getY());
       if(RobotMap.limitSwitch.get())
       {
           RobotMap.armMotor.set(0.2*(OI.joystick3.getY()));
           if (OI.joystick3.getRawButton(4)==false)
           {    
               RobotMap.armMotor.set(0.2*(OI.joystick3.getY()));//0.4
           }
           else
           {
               RobotMap.armMotor.set(0.4*(OI.joystick3.getY()));//0.8
           }
           
       }
       else
       {
           RobotMap.armMotor.set((0.4*(Math.abs(OI.joystick3.getY()))));//0.4
       }
       /*if (OI.joystick3.getRawButton(3))
       {
           RobotMap.shooterWheelClose.set(1);
           RobotMap.shooterWheelFar.set(1);
       }
       else
       {
           RobotMap.shooterWheelClose.set(0);
           RobotMap.shooterWheelFar.set(0);
       }*/
       /*if(OI.joystick3.getRawButton(3))
       {
           RobotMap.shooterWheelClose.set(1);
       }
       else
       {
           RobotMap.shooterWheelClose.set(0);
       }
       if(OI.joystick3.getRawButton(4))
       {
           RobotMap.shooterWheelFar.set(1);
       }
       else
       {
           RobotMap.shooterWheelFar.set(0);
       }*/
       /*if (RobotMap.timz.get()>=0.65)
           {
               RobotMap.VexMotor.set(0);
               Robot.ds.println(DriverStationLCD.Line.kUser2,1,"VexMotor is Spinning! ");
               RobotMap.timz.reset();
           }
       if (OI.joystick3.getRawButton(2))
       {
           RobotMap.timz.start();
           RobotMap.VexMotor.set(1);
           if (RobotMap.timz.get()>=1.0)
           {
               RobotMap.VexMotor.set(0);
               RobotMap.timz.reset();
           }
       }
       if (RobotMap.timz3.get()>=0.32)
       {
           RobotMap.VexMotor.set(0);
                          Robot.ds.println(DriverStationLCD.Line.kUser1,1,"VexMotor is Spinning HALF! ");

           RobotMap.timz3.reset();
       }
       if (OI.joystick3.getRawButton(5))
       {
           RobotMap.timz3.start();
           RobotMap.VexMotor.set(1);
       }
       if (RobotMap.timz4.get()>=0.15)
       {
           RobotMap.VexMotor.set(0);
           RobotMap.timz4.reset();
       }*/
       /*if(OI.joystick3.getRawButton(5))
       {
           RobotMap.timz4.start();
                          Robot.ds.println(DriverStationLCD.Line.kUser6,1,"VexMotor is Reverse! ");

           RobotMap.VexMotor.set(-1);
       }/*
       
       //else
       //{
       //    RobotMap.VexMotor.set(0);
       //}
       
           RobotMap.compressor.start();
      //working 
       if (OI.joystick3.getTrigger()) //************************************
       {
           RobotMap.solenoid2.set(true);
       }
       if (OI.joystick3.getTrigger()==false)
       {
           RobotMap.solenoid2.set(false);
       }
           
           
           
       /*if (OI.joystick3.getY()>=0.2)
        {
            RobotMap.armMotor.set(0.1);
            Robot.ds.println(DriverStationLCD.Line.kUser6,1,"positive arm");
            
        }
        if (OI.joystick3.getY()<=-0.2)
        {
            RobotMap.armMotor.set(-0.1);
            Robot.ds.println(DriverStationLCD.Line.kUser6,1,"negative arm");
        }
        else //(((OI.joystick3.getY()<0.2))&&((OI.joystick3.getY()>-0.2)));
        {
            RobotMap.armMotor.set(0);
            Robot.ds.println(DriverStationLCD.Line.kUser6,1,"zero arm");

        }*/
       /*if (OI.joystick3.getTrigger()) //************************************
       {
           RobotMap.solenoid2.set(true);
       }
       if (OI.joystick3.getTrigger()==false)
       {
           RobotMap.solenoid2.set(false);
       }*/
       Robot.ds.println(DriverStationLCD.Line.kUser1,1,"VexSpeed: "+RobotMap.VexMotor.get()+"                               ");
       Robot.ds.println(DriverStationLCD.Line.kUser3,1,"ArmLimitSwitch: "+RobotMap.limitSwitch2.get()+"                               ");
       Robot.ds.println(DriverStationLCD.Line.kUser6,1," SensorD2 "+RobotMap.sensor2detector.getValue()+"                                ");
       Robot.ds.updateLCD();
       int IRvalue = 955; // we started at 950, 940 for outside
       RobotMap.compressor.start();
       //normally true
       
       if((RobotMap.limitSwitch2.get()==false)&&(RobotMap.sensor2detector.getValue()>=IRvalue))
       {//both loaded
           //Robot.ds.println(DriverStationLCD.Line.kUser6,1," LOADED and HALDLOADED, GO GET 'EM!");
           //Robot.ds.updateLCD();
           RobotMap.shooterWheelClose.set(shooterConstant);
           RobotMap.shooterWheelFar.set(shooterConstant);
           
            //RobotMap.VexMotor.set(0.2);
            /*RobotMap.timer1.start();
            if(RobotMap.timer1.get()>=0.25)
            {
                RobotMap.VexMotor.set(0);
                RobotMap.timer1.stop();
                RobotMap.timer1.reset();
            }*/
            
           
           RobotMap.VexMotor.set(0);
           if (OI.joystick3.getTrigger())
            {
                RobotMap.solenoid2.set(true);
                
                
            }
            if (OI.joystick3.getTrigger()==false)
            {
                RobotMap.solenoid2.set(false);
                
            }
        }
       else
       {
           RobotMap.shooterWheelClose.set(0);
           RobotMap.shooterWheelFar.set(0);
           
           if((RobotMap.limitSwitch2.get()==false)&&(RobotMap.sensor2detector.getValue()<IRvalue)&&(RobotMap.armEncoder.get()>=-500))
           {//bottom is empty and top is loaded
               //Robot.ds.println(DriverStationLCD.Line.kUser6,1," HALFLOADED...WAIT                       ");
               //Robot.ds.updateLCD();
               
               /*if (RobotMap.solenoid2.get()==true)
               {
                   RobotMap.VexMotor.set(0);
               }
               else
               {*/
                   RobotMap.VexMotor.set(0.75);
                   RobotMap.solenoid2.set(false);
               
               RobotMap.shooterWheelClose.set(shooterConstant);
               RobotMap.shooterWheelFar.set(shooterConstant);
           }
           if((RobotMap.limitSwitch2.get()==true)&&(RobotMap.sensor2detector.getValue()>=IRvalue)&&(RobotMap.armEncoder.get()>=-500))
           {//bottom is loaded and top is empty
               //Robot.ds.println(DriverStationLCD.Line.kUser6,1," LOADED, SHOOT!                      ");
               //Robot.ds.updateLCD();
               
                   
               
               /*if(RobotMap.solenoid2.get()==true)
               {
                   RobotMap.VexMotor.set(0);
               }
               else
               {
                   RobotMap.VexMotor.set(1);
               }*/
               RobotMap.VexMotor.set(0.75);
               RobotMap.shooterWheelClose.set(shooterConstant);
               RobotMap.shooterWheelFar.set(shooterConstant);
               if (OI.joystick3.getTrigger())
               {
                    RobotMap.solenoid2.set(true);
                    RobotMap.VexMotor.set(0);
               }
               if (OI.joystick3.getTrigger()==false)
               {
                   RobotMap.solenoid2.set(false);
                   RobotMap.VexMotor.set(0.75);
               }
               
               
            }
           if((RobotMap.limitSwitch2.get()==true)&&(RobotMap.sensor2detector.getValue()<IRvalue)&&(RobotMap.armEncoder.get()>=-500))
           {//both empty
               //Robot.ds.println(DriverStationLCD.Line.kUser6,1," NOT LOADED, CHILL OUT BRAH              ");
               //Robot.ds.updateLCD();
               RobotMap.solenoid2.set(false);
               /*if (RobotMap.solenoid2.get()==false)
               {
                   RobotMap.VexMotor.set(1);
               }
               else
               {
                   RobotMap.VexMotor.set(0);
               }*/
               RobotMap.VexMotor.set(0.75);
               RobotMap.shooterWheelClose.set(0);
               RobotMap.shooterWheelFar.set(0);
           }
       }
       
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }
    // Called once after isFinished returns true
    protected void end() {
        RobotMap.driveTrainLeftLeftMotor.set(0);
        RobotMap.driveTrainLeftLeftMotor2.set(0);
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
}
